name: 自动编译并发布 luci-app-* IPK

on:
  push:
    paths:
      - 'luci-app-*/**'
      - '.github/workflows/*.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 自动检测 APP_NAME
        id: set_app
        run: |
          APP_NAME=$(find . -maxdepth 1 -type d -name 'luci-app-*' | sed 's|^\./||' | head -n1)
          if [ -z "$APP_NAME" ]; then
            echo "❌ 未找到 luci-app-* 目录，终止流程。"
            exit 1
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: 提取版本号
        id: getver
        run: |
          VER=$(grep -m1 '^PKG_VERSION:=' $APP_NAME/Makefile | cut -d= -f2 | tr -d ' ')
          REL=$(grep -m1 '^PKG_RELEASE:=' $APP_NAME/Makefile | cut -d= -f2 | tr -d ' ')
          if [ -z "$VER" ] || [ -z "$REL" ]; then
            echo "❌ 无法从 Makefile 获取版本号，终止流程。"
            exit 1
          fi
          TAG="${VER}-${REL}"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: 安装编译依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python3 python3-dev

      - name: 下载并解压 OpenWrt SDK
        run: |
          SDK_URL="https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          wget -q $SDK_URL -O sdk.tar.xz || { echo "❌ SDK下载失败"; exit 1; }
          tar -xf sdk.tar.xz || { echo "❌ SDK解压失败"; exit 1; }
          SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*")
          if [ -z "$SDK_DIR" ]; then
            echo "❌ SDK 解压失败，终止流程。"
            exit 1
          fi
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV

      - name: 更新 SDK 包索引
        run: |
          cd $SDK_DIR
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 拷贝应用到 SDK 包目录
        run: |
          cp -r $APP_NAME $SDK_DIR/package/$APP_NAME

      - name: 编译 IPK
        run: |
          cd $SDK_DIR
          make defconfig
          make package/$APP_NAME/compile V=s || { echo "❌ 编译失败"; exit 1; }

      - name: 查找单个 ipk 文件并导出变量
        id: findipk
        run: |
          IPK_PATH=$(find $SDK_DIR/bin -name "${APP_NAME}_*.ipk" | head -n1)
          echo "查找到的ipk文件: $IPK_PATH"
          echo "IPK_PATH=$IPK_PATH" >> $GITHUB_ENV
          if [ -z "$IPK_PATH" ]; then
            echo "❌ 没有找到任何ipk文件，终止流程。"
            exit 1
          fi

      - name: 上传 IPK 到 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_ipk_${{ env.TAG }}
          path: ${{ env.IPK_PATH }}
